package at.ac.tuwien.sepr.assignment.individual.persistence;

import at.ac.tuwien.sepr.assignment.individual.dto.tournament.TournamentCreateDto;
import at.ac.tuwien.sepr.assignment.individual.dto.tournament.TournamentDetailParticipantDto;
import at.ac.tuwien.sepr.assignment.individual.dto.tournament.TournamentStandingsDto;
import at.ac.tuwien.sepr.assignment.individual.entity.Race;
import at.ac.tuwien.sepr.assignment.individual.entity.Tournament;
import at.ac.tuwien.sepr.assignment.individual.exception.ConflictException;
import at.ac.tuwien.sepr.assignment.individual.exception.ValidationException;

import java.util.Collection;

/**
 * Data Access Object for handling races in tournaments.
 * Implements access functionality to the application's persistent data store regarding races.
 */
public interface RaceDao {

  /**
   * Get the races associated with a specific tournament.
   * Note: races are autogenerated and should always be present for a tournament
   *
   * @param tournamentId the ID of the tournament
   * @return a collection of races for the horses in the tournament
   * @throws ValidationException if no races are found
   */
  Collection<Race> getHorseRaces(Long tournamentId) throws ValidationException;

  /**
   * Update the first round matches for a tournament with the given participants.
   * It also updates all other races assigning them as empty.
   * Here, the races are always created in circular pattern - first - last, second - last -1...
   *
   * @param tournamentId the ID of the tournament
   * @param participants the array of participants in the tournament
   * @return a collection of races representing the first round matches
   * @throws ConflictException if there are missing first round matches, as this method only updates data
   */
  Collection<Race> updateFirstRoundMatches(long tournamentId, TournamentDetailParticipantDto[] participants) throws ConflictException, ValidationException;

  /**
   * Adds races to a tournament based on the provided TournamentCreateDto and tournament ID.
   * This method will only be invoked for the creation of new tournaments and is treated like that.
   * Participations are added through another method!
   *
   * @param id the ID of the tournament
   * @param tournamentCreateDto the DTO containing information about the tournament and its races
   */
  void addRacesOnTournament(TournamentCreateDto tournamentCreateDto, Long id);

  /**
   * Updates the races of a tournament based on the provided TournamentStandingsDto.
   * This method expects a valid standings tree.
   *
   * @param standingsDto the DTO containing standings information for the tournament
   */
  void updateRacesOfTournament(TournamentStandingsDto standingsDto);

  /**
   * Evaluates the tournament score of a participant in the context of a tournament.
   * If the querry does not find any matches for this horse, it will result as a null.
   *
   * @param participant the participant for which to evaluate the score
   * @param tournament the tournament in which the participant is competing
   * @return the score of the participant in the tournament, or null if there are no previous matches for this horse
   */
  Long evaluateTournamentScoreOnParticipant(TournamentDetailParticipantDto participant, Tournament tournament);
}
